#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <limits.h>
#include <stdbool.h>

typedef struct stack
{
int data;
struct stack* next;

}st;
st * s;
void push(st** top, int data)
{
    st* new = (st*)malloc(sizeof(st));
    
    new->data = data;
    new->next = *top;
    *top = new;
    
}

int peek(st* top)
{
    return top->data;
}

int empty(st* top)
{
    if(top==NULL)
    {
        return 1;
    }
    return 0;
}
void pop(st** top)
{
    
        st* temp=*top;
        *top=(*top)->next;
        free(temp);
        temp=NULL;    
}

int getMaxArea(int* hist, int n)
{
    //complete this function
   int max=0;
   int area=0;
   int tp=0;
   int i=0;
   for(i=0;i<n;i++)
   {
       if(empty(s)==1 || (hist[peek(s)]<hist[i]))
       {
           
           push(&s,i);
       }
       else
       {
           while(empty(s)==0 && hist[peek(s)]>hist[i])
           {

           tp=peek(s);
           pop(&s);
           
           int dist =empty(s)==1?i:(i-peek(s)-1);
           area=hist[tp]* dist;
           if(area>max)
           {
               max=area;
           }
           }
           push(&s,i);
       }   
   }
   while(empty(s)==0)
   {
       tp=peek(s);
           pop(&s);
           int dist =empty(s)==1?i:(i-peek(s)-1);
           area=hist[tp]* dist;
           if(area>max)
           {
               max=area;
           }
   }
    return max;
}


int main() {
   
    int n;
    scanf("%d", &n);
    int arr[n];
    int i;
    for(i=0;i<n;i++)
    {
        scanf("%d", &arr[i]);
        
    }
    
    int r = getMaxArea(arr, n);
    printf("%d", r);
    return 0;
}
