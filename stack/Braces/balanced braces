#include <assert.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();



// Complete the braces function below.

// Please store the size of the string array to be returned in result_count pointer. For example,
// char a[2][6] = {"hello", "world"};
//
// *result_count = 2;
//
// return a;
//
typedef struct stack
{
char data;
struct stack* next;

}st;
int count=0;
void push(st** top, char data)
{
    //int count=0;
    st* ne = (st*)malloc(sizeof(st));
    
    ne->data = data;
    if(count!=0)
    ne->next = *top;
    else
    ne->next=NULL;
    *top = ne;
    count++;
    
}

int peek(st* top)
{
    return top->data;
    
}

int empty(st* top)
{
    if(top==NULL)
    {
        return 1;
    }
    return 0;
}
void pop(st** top)
{
        st* temp=*top;
        *top=(*top)->next;
        free(temp);
        temp=NULL;    
}
char** braces(int values_count, char** values, int* result_count) {
   
   for(int i=0;i<values_count;i++)
   {
       count=0;
       st * s=(st *)malloc(sizeof(st));
       st *ptr=s;
       int flag=1,flag2=0;
       for(int j=0;values[i][j]!='\0';j++)
       {
           if(values[i][j]=='(' || values[i][j]=='{' || values[i][j]=='[' )
           {
               push(&ptr,values[i][j]);
           }
           else if(values[i][j]==')' || values[i][j]=='}' || values[i][j]==']')
           {   
               if(!empty(ptr))
               {
                   if(peek(ptr)=='(' && values [i][j]==')')
                   { 
                       pop(&ptr);
                     
                   }
                   else if(peek(ptr)=='{' && values [i][j]=='}')
                   {
                       pop(&ptr);
                   }
                   else if(peek(ptr)=='[' && values [i][j]==']')
                   {
                       pop(&ptr);
                   }
               }
               else
               {
                   flag=0;
                   flag2=1;
                   
                   break;
               }
           }
           
       }
       //printf("%d",peek(ptr));
         if(flag2==0)
         {
            // printf("%d",flag2);
           if(empty(ptr))
              { flag=1;
              
              }
           else
               flag=0;
         }
         if(flag==1)
         {
             strcpy(values[i],"YES");
         }
         else
         {
             strcpy(values[i],"NO");
         }  
   }
   *result_count=values_count;
  return values;
}

int main()
{
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    char* values_count_endptr;
    char* values_count_str = readline();
    int values_count = strtol(values_count_str, &values_count_endptr, 10);

    if (values_count_endptr == values_count_str || *values_count_endptr != '\0') { exit(EXIT_FAILURE); }

    char** values = malloc(values_count * sizeof(char*));

    for (int i = 0; i < values_count; i++) {
        char* values_item = readline();

        *(values + i) = values_item;
    }

    int res_count;
    char** res = braces(values_count, values, &res_count);

    for (int i = 0; i < res_count; i++) {
        fprintf(fptr, "%s", *(res + i));

        if (i != res_count - 1) {
            fprintf(fptr, "\n");
        }
    }

    fprintf(fptr, "\n");

    fclose(fptr);

    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;
    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) { break; }

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') { break; }

        size_t new_length = alloc_length << 1;
        data = realloc(data, new_length);

        if (!data) { break; }

        alloc_length = new_length;
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
    }

    data = realloc(data, data_length);

    return data;
}
